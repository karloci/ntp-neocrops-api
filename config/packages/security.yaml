security:
    password_hashers:
        App\User\Entity\User:
            id: App\Core\Security\PasswordHasher

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        authentication:
            pattern: ^/authentication/
            stateless: true
        api:
            pattern: ^/
            stateless: true
            custom_authenticators:
                - App\Core\Security\AccessTokenAuthenticator
        main:
            lazy: true
            provider: app_user_provider
    access_control:
        - { path: ^/authentication/login,          roles: PUBLIC_ACCESS }
        - { path: ^/authentication/register,       roles: PUBLIC_ACCESS }
        - { path: ^/authentication/refresh-token,  roles: PUBLIC_ACCESS }
        - { path: ^/,                              roles: IS_AUTHENTICATED_FULLY }
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
